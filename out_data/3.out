   1: if a == b then a:=b
┌────────────────────────┐
│                        │
│    Lexical Analysis    │
│                        │
└────────────────────────┘
Type: IF 
Type: ID Value: a 
Type: ROP Value: == 
Type: ID Value: b 
Type: THEN 
Type: ID Value: a 
Type: ASSIGNMENT 
Type: ID Value: b 
Type: EOFT 
┌────────────────────────┐
│                        │
│     Syntax Analysis    │
│                        │
└────────────────────────┘
>>>>>>>>>>>>>>>>>>>>>>>>>>Success<<<<<<<<<<<<<<<<<<<<<<<
1: {S,} -> {C,} {S,} 
3: {S,} -> {A,} 
8: {A,} -> {ID,a} {ASSIGNMENT,} {E,} 
13: {E,} -> {ID,b} 
4: {C,} -> {IF,} {B,} {THEN,} 
18: {B,} -> {E,} {ROP,==} {E,} 
13: {E,} -> {ID,b} 
13: {E,} -> {ID,a} 
┌────────────────────────┐
│                        │
│  Abstract Syntax Tree  │
│                        │
└────────────────────────┘
Leaves:
IF a == b THEN a ASSIGNMENT b 
Nodes:
{Type: S id: 1} 
{Type: C id: 4} {Type: S id: 3} 
{Type: IF id: -1} {Type: B id: 18} {Type: THEN id: -1} {Type: A id: 8} 
{Type: E id: 13} {Type: ROP Value: == id: -1} {Type: E id: 13} {Type: ID Value: a id: -1} {Type: ASSIGNMENT id: -1} {Type: E id: 13} 
{Type: ID Value: a id: -1} {Type: ID Value: b id: -1} {Type: ID Value: b id: -1} 
┌──────────────────────────────┐
│                              │
│ Intermediate Code Generation │
│                              │
└──────────────────────────────┘
0: (=, a, _, $t1)
1: (=, b, _, $t2)
2: (==, $t1, $t2, $t3)
3: (j=, $t3, true, 5)
4: (j, _, _, 7)
5: (=, b, _, $t4)
6: (:=, $t4, _, a)
